    /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pokemoncardgame;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import pokemoncardgame.models.Pokemon;
import pokemoncardgame.models.Bulbasaur;
import pokemoncardgame.models.Butterfree;
import pokemoncardgame.models.Charmander;
import pokemoncardgame.models.Jigglypuff;
import pokemoncardgame.models.Meowth;
import pokemoncardgame.models.Pikachu;
import pokemoncardgame.models.Psyduck;
import pokemoncardgame.models.Snorlax;
import pokemoncardgame.models.Squirtle;
import pokemoncardgame.models.Zubat;
/**
 *
 * @author askilic
 */
public class GameArena extends javax.swing.JFrame {

    /**
     * Creates new form gameArena
     */
    public GameArena() {
        initComponents();
        generateRandomPokeCardList();
    }
    
    PlayerGamer player;
    ComputerGamer computer;
    List<Pokemon> pokeList;
    //List<Pokemon> pokeList2;
    int ScoreP = 0;
    int ScoreC = 0;
    private void generateRandomPokeCardList()
    {
        Bulbasaur b = new Bulbasaur();
        Butterfree bf = new Butterfree();
        Charmander c = new Charmander();
        Jigglypuff j = new Jigglypuff();
        Meowth m = new Meowth();
        Pikachu p = new Pikachu();
        Psyduck pd = new Psyduck();
        Snorlax s = new Snorlax();
        Squirtle sq = new Squirtle();
        Zubat z = new Zubat();
        
        player = new PlayerGamer();
        computer = new ComputerGamer();
        
        pokeList = new ArrayList<Pokemon>();
        /*pokeList2 = new ArrayList<Pokemon>();
        
        int random = (int) (Math.random() * 10);
        System.out.println(random);
        if (random <= 5) {
            pokeList.add(b);
            pokeList2.add(bf);
            pokeList.add(c);
            pokeList2.add(j);
            pokeList.add(m);
            pokeList2.add(p);
            pokeList.add(pd);
            pokeList2.add(s);
            pokeList.add(sq);
            pokeList2.add(z);
        }
        
        else{
            pokeList2.add(b);
            pokeList.add(bf);
            pokeList2.add(c);
            pokeList.add(j);
            pokeList2.add(m);
            pokeList.add(p);
            pokeList2.add(pd);
            pokeList.add(s);
            pokeList2.add(sq);
            pokeList.add(z);
        }*/
        
        pokeList.add(b); 
        pokeList.add(bf);
        pokeList.add(c);
        pokeList.add(j);
        pokeList.add(m);
        pokeList.add(p);       
        pokeList.add(pd);
        pokeList.add(s);
        pokeList.add(sq);
        pokeList.add(z);
        
        player.setCardList(pokeList);
        computer.setCardList(pokeList);
    }
    
     public static void wait(int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arenaPanel = new javax.swing.JPanel();
        player2card1 = new javax.swing.JButton();
        player2card2 = new javax.swing.JButton();
        player2card3 = new javax.swing.JButton();
        playerPlace = new javax.swing.JLabel();
        computerPlace = new javax.swing.JLabel();
        player1activecard = new javax.swing.JLabel();
        player2activecard = new javax.swing.JLabel();
        arenaPic = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        arenaPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        player2card1.setText("Player 2 Card 1");
        player2card1.setMaximumSize(new java.awt.Dimension(75, 23));
        player2card1.setMinimumSize(new java.awt.Dimension(75, 23));
        player2card1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player2card1ActionPerformed(evt);
            }
        });
        arenaPanel.add(player2card1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 480, 120, 100));

        player2card2.setText("Player 2 Card 2");
        player2card2.setMaximumSize(new java.awt.Dimension(75, 23));
        player2card2.setMinimumSize(new java.awt.Dimension(75, 23));
        player2card2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player2card2ActionPerformed(evt);
            }
        });
        arenaPanel.add(player2card2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 480, 120, 100));

        player2card3.setText("Player 2 Card 3");
        player2card3.setMaximumSize(new java.awt.Dimension(75, 23));
        player2card3.setMinimumSize(new java.awt.Dimension(75, 23));
        player2card3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player2card3ActionPerformed(evt);
            }
        });
        arenaPanel.add(player2card3, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 480, 120, 100));

        playerPlace.setFont(new java.awt.Font("Ubuntu", 3, 30)); // NOI18N
        playerPlace.setForeground(new java.awt.Color(209, 30, 30));
        arenaPanel.add(playerPlace, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 488, 210, 60));

        computerPlace.setFont(new java.awt.Font("Ubuntu", 3, 30)); // NOI18N
        computerPlace.setForeground(new java.awt.Color(209, 30, 30));
        arenaPanel.add(computerPlace, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 240, 60));

        player1activecard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/battleCardPlace.jpg"))); // NOI18N
        player1activecard.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        player1activecard.setMaximumSize(new java.awt.Dimension(120, 100));
        player1activecard.setMinimumSize(new java.awt.Dimension(120, 100));
        arenaPanel.add(player1activecard, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 100, -1, 310));

        player2activecard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/battleCardPlace.jpg"))); // NOI18N
        arenaPanel.add(player2activecard, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 160, 220, -1));

        arenaPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gameArena1.png"))); // NOI18N
        arenaPic.setText("jLabel1");
        arenaPanel.add(arenaPic, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(arenaPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 975, 640));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void player2card1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player2card1ActionPerformed
        
        Pokemon pp = player.getRandomCard();
        
        try {
            BufferedImage nulPic = ImageIO.read(new File("src/images/nulpic.jpeg"));
            if (pp == null) {

                player2activecard.setIcon(new ImageIcon(nulPic));
            } else {
                BufferedImage p1Pic = ImageIO.read(new File(pp.getPokemonURL()));
                player2activecard.setIcon(new ImageIcon(p1Pic));
            }
        } catch (IOException ex) {
            Logger.getLogger(GameArena2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        wait(1500);
        
        Pokemon pc = computer.getRandomCard();
        
        try {

            BufferedImage nulPic = ImageIO.read(new File("src/images/nulpic.jpeg"));
            if (pc == null) {
                player1activecard.setIcon(new ImageIcon(nulPic));
            } else {
                BufferedImage p2Pic = ImageIO.read(new File(pc.getPokemonURL()));
                player1activecard.setIcon(new ImageIcon(p2Pic));
            }

        } catch (IOException ex) {
            Logger.getLogger(GameArena2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int ppAttackDamage;
        int pcAttackDamage;
        if(pp != null && pc != null){
            
            ppAttackDamage = pp.showAttackPower();
            pcAttackDamage = pc.showAttackPower();
            
            if(ppAttackDamage > pcAttackDamage){
                ScoreP+=5;
            }
            if(pcAttackDamage > ppAttackDamage){
                ScoreC +=5;
            }
            
            player.setScore(ScoreP);
            computer.setScore(ScoreC);
        }
        
        if(pp == null & pc == null){
            if(ScoreP > ScoreC){
                JOptionPane.showMessageDialog(null, "PLAYER : "+player.getScore()
                +" puanla kazanmıştır");
            }
            
           else if(ScoreC > ScoreP){
                JOptionPane.showMessageDialog(null, "COMPUTER : "+computer.getScore()+
                        " puanla kazanmıştır");
            }
           else{
               JOptionPane.showMessageDialog(null, "PLAYER : "+player.getScore()
               +"\nCOMPUTER : "+computer.getScore() + "\n puanlarıyla berabere kalmıştır");
           } 
            
            setVisible(false);
            GameMainMenu again = new GameMainMenu();
            again.setVisible(true);
        }
        
        playerPlace.setText("PLAYER : " + player.getScore());
        computerPlace.setText("COMPUTER : " + computer.getScore());
    }//GEN-LAST:event_player2card1ActionPerformed

    private void player2card2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player2card2ActionPerformed
        
        Pokemon pp = player.getRandomCard();
        
        
        try {
            BufferedImage nulPic = ImageIO.read(new File("src/images/nulpic.jpeg"));
            if (pp == null) {

                player2activecard.setIcon(new ImageIcon(nulPic));
            } else {
                BufferedImage p1Pic = ImageIO.read(new File(pp.getPokemonURL()));
                player2activecard.setIcon(new ImageIcon(p1Pic));
            }
        } catch (IOException ex) {
            Logger.getLogger(GameArena2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        wait(1500);
        
        Pokemon pc = computer.getRandomCard();
        
         try {

            BufferedImage nulPic = ImageIO.read(new File("src/images/nulpic.jpeg"));
            if (pc == null) {
                player1activecard.setIcon(new ImageIcon(nulPic));
            } else {
                BufferedImage p2Pic = ImageIO.read(new File(pc.getPokemonURL()));
                player1activecard.setIcon(new ImageIcon(p2Pic));
            }

        } catch (IOException ex) {
            Logger.getLogger(GameArena2.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         int ppAttackDamage;
        int pcAttackDamage;
        if(pp != null && pc != null){
            
            ppAttackDamage = pp.showAttackPower();
            pcAttackDamage = pc.showAttackPower();
            
            if(ppAttackDamage > pcAttackDamage){
                ScoreP+=5;
            }
            if(pcAttackDamage > ppAttackDamage){
                ScoreC +=5;
            }
            
            player.setScore(ScoreP);
            computer.setScore(ScoreC);
        }
        
        if(pp == null & pc == null){
            if(ScoreP > ScoreC){
                JOptionPane.showMessageDialog(null, "PLAYER : "+player.getScore()
                +" puanla kazanmıştır");
            }
            
           else if(ScoreC > ScoreP){
                JOptionPane.showMessageDialog(null, "COMPUTER : "+computer.getScore()+
                        " puanla kazanmıştır");
            }
           else{
               JOptionPane.showMessageDialog(null, "PLAYER : "+player.getScore()
               +"\nCOMPUTER : "+computer.getScore() + "\n puanlarıyla berabere kalmıştır");
           } 
            
            setVisible(false);
            GameMainMenu again = new GameMainMenu();
            again.setVisible(true);
        }
        
        playerPlace.setText("PLAYER : " + player.getScore());
        computerPlace.setText("COMPUTER : " + computer.getScore());
    }//GEN-LAST:event_player2card2ActionPerformed

    private void player2card3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player2card3ActionPerformed
        
        Pokemon pp = player.getRandomCard();
        
        try {
            BufferedImage nulPic = ImageIO.read(new File("src/images/nulpic.jpeg"));
            if (pp == null) {

                player2activecard.setIcon(new ImageIcon(nulPic));
            } else {
                BufferedImage p1Pic = ImageIO.read(new File(pp.getPokemonURL()));
                player2activecard.setIcon(new ImageIcon(p1Pic));
            }
        } catch (IOException ex) {
            Logger.getLogger(GameArena2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        wait(1500);
        
        Pokemon pc = computer.getRandomCard();
        
        try {

            BufferedImage nulPic = ImageIO.read(new File("src/images/nulpic.jpeg"));
            if (pc == null) {
                player1activecard.setIcon(new ImageIcon(nulPic));
            } else {
                BufferedImage p2Pic = ImageIO.read(new File(pc.getPokemonURL()));
                player1activecard.setIcon(new ImageIcon(p2Pic));
            }

        } catch (IOException ex) {
            Logger.getLogger(GameArena2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int ppAttackDamage;
        int pcAttackDamage;
        if(pp != null && pc != null){
            
            ppAttackDamage = pp.showAttackPower();
            pcAttackDamage = pc.showAttackPower();
            
            if(ppAttackDamage > pcAttackDamage){
                ScoreP+=5;
            }
            if(pcAttackDamage > ppAttackDamage){
                ScoreC +=5;
            }
            
            player.setScore(ScoreP);
            computer.setScore(ScoreC);
        }
        
        if(pp == null & pc == null){
            if(ScoreP > ScoreC){
                JOptionPane.showMessageDialog(null, "PLAYER : "+player.getScore()
                +" puanla kazanmıştır");
            }
            
           else if(ScoreC > ScoreP){
                JOptionPane.showMessageDialog(null, "COMPUTER : "+computer.getScore()+
                        " puanla kazanmıştır");
            }
           else{
               JOptionPane.showMessageDialog(null, "PLAYER : "+player.getScore()
               +"\nCOMPUTER : "+computer.getScore() + "\n puanlarıyla berabere kalmıştır");
           }
            
            setVisible(false);
            GameMainMenu again = new GameMainMenu();
            again.setVisible(true);
        }
        
        playerPlace.setText("PLAYER : " + player.getScore());
        computerPlace.setText("COMPUTER : " + computer.getScore());
    }//GEN-LAST:event_player2card3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameArena.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameArena.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameArena.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameArena.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GameArena().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel arenaPanel;
    private javax.swing.JLabel arenaPic;
    private javax.swing.JLabel computerPlace;
    private javax.swing.JLabel player1activecard;
    private javax.swing.JLabel player2activecard;
    private javax.swing.JButton player2card1;
    private javax.swing.JButton player2card2;
    private javax.swing.JButton player2card3;
    private javax.swing.JLabel playerPlace;
    // End of variables declaration//GEN-END:variables
}
